{"version":3,"sources":["reportWebVitals.js","components/CategoryAdd.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","gif-expert-app.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","CategoryAdd","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","imgs","useFetchGifs","GifExpertApp","categories","idx","ReactDOM","render","document","getElementById"],"mappings":"8KAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,qBCJDQ,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAAqB,EAEZC,mBAAS,IAFG,mBAEzCC,EAFyC,KAE7BC,EAF6B,KAiBhD,OACI,sBAAMC,SAVW,SAAEC,GACnBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACxCN,EAAc,MAKlB,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SAlBc,SAAEP,GACxBF,EAAeE,EAAEQ,OAAOF,a,+BCPnBG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DAEbC,EAFa,0FAE6EC,UAAWH,GAFxF,sBAIAI,MAAOF,GAJP,cAIbG,EAJa,gBAKIA,EAAKC,OALT,uBAKXC,EALW,EAKXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXvB,kBAeZM,GAfY,4CAAH,sDCCPO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IACjC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,4BAAKA,QCDJO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECDb,SAAEA,GAAe,IAAD,EAEdd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAmBxC,OAZAC,qBAAW,WAEPxB,EAASC,GACJtB,MAAM,SAAA8C,GACHF,EAAS,CACLf,KAAMiB,EACNJ,SAAS,SAItB,CAAEpB,IAEEqB,EDd0BI,CAAczB,GAAlCa,EAJwB,EAI7BN,KAAaa,EAJgB,EAIhBA,QAOrB,OACI,qCACI,6BAAMpB,IAEJoB,GAAW,2CAEb,qBAAKJ,UAAU,YAAf,SAEQH,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAESA,GADCA,EAAIC,aEavBe,EAlCM,WAAM,MAGaxC,mBAAU,CAAC,cAHxB,mBAGhByC,EAHgB,KAGJ1C,EAHI,KAUvB,OACI,qCACI,gDAEA,cAAC,EAAD,CAAaA,cAAgBA,IAE7B,uBAIA,6BAEQ0C,EAAWlB,KAAK,SAACT,EAAU4B,GAAX,OACZ,cAAC,EAAD,CAEI5B,SAAWA,GADL4B,EAAM,YCtBxCC,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,SAM1BzD,M","file":"static/js/main.b5b713a9.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport const CategoryAdd = ( { setCategories } ) => {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = ( e ) => {\n        setInputValue( e.target.value );\n    }\n\n    const handleSubmit = ( e ) => {\n        e.preventDefault();\n\n        if (inputValue.trim().length > 2) {\n            setCategories( cats => [ inputValue, ...cats] );\n            setInputValue('');\n        }\n    }\n\n    return (\n        <form onSubmit={ handleSubmit }>\n            <input\n                type=\"text\"\n                value={ inputValue } \n                onChange={ handleInputChange }\n            />\n        </form>\n    );\n\n}\n\nCategoryAdd.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}","\nexport const getGifs = async ( category ) => {\n\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=kSyFGgMIIdESGRLSRRli5Enn2v8hqGlW&q=${ encodeURI( category ) }&limit=10`;\n\n    const resp = await fetch( url );\n    const { data } = await resp.json();\n\n    const gifs = data.map( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n\n    return gifs;\n\n    //console.log(gifs);\n}","import React from 'react'\n\nexport const GifGridItem = ({ title, url }) => {\n    return (\n        <div className='card animate__animated animate__fadeIn'>\n            <img src={ url } alt={ title } />\n            <p>{ title }</p>\n        </div>\n    )\n}\n","import React from 'react'\n// import { getGifs } from '../helpers/getGifs';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({ category }) => {\n\n    // const [images, setImages] = useState([]);\n\n    const { data:images, loading } = useFetchGifs( category );\n\n    // useEffect( () => {\n    //     getGifs( category )\n    //         .then( setImages );\n    // }, [ category ])\n\n    return (\n        <>\n            <h3>{ category }</h3>\n            \n            { loading && <p>loading...</p> }\n\n            <div className=\"card-grid\">\n                {\n                    images.map( img => (\n                        <GifGridItem \n                            key={ img.id } \n                            { ...img } />\n                    ))\n                }\n            </div>\n        </>\n    )\n}\n","import { useEffect, useState } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\"\n\n\nexport const useFetchGifs = ( category ) => {\n\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    })\n\n    useEffect( () => {\n\n        getGifs( category )\n            .then( imgs => {\n                setState({\n                    data: imgs,\n                    loading: false\n                });\n            })\n\n    }, [ category ])\n\n    return state;\n\n}","import React, { useState } from 'react';\nimport { CategoryAdd } from './components/CategoryAdd';\nimport { GifGrid } from './components/GifGrid';\n\n\nconst GifExpertApp = () => {\n\n    // const categories = ['Obe Ounch', 'Samurai X', 'Dragon Ball']\n    const [categories, setCategories] = useState( ['One Punch'] );\n\n    // const handleAdd = () => {\n    //     // setCategories( [...categories, 'new item'] );\n    //     setCategories( cats => [ ...cats, 'New Category' ] );\n    // } \n\n    return (\n        <>\n            <h2>Gif Expert App</h2>\n\n            <CategoryAdd setCategories={ setCategories } />\n\n            <hr/>\n\n            {/* <button onClick={ handleAdd }>Agregar</button> */}\n\n            <ol>\n                {\n                    categories.map( (category, idx) => (\n                        <GifGrid \n                            key={ idx + 1 } \n                            category={ category } \n                        />\n                    ))\n                }\n            </ol>\n        </>\n    );\n}\n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nimport GifExpertApp from './gif-expert-app';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}